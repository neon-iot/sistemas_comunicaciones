function [syndrome,correctedWords] = CRCcheck(words)
%Given a 16bit binary code word, performs the CRC16 (as defined in RDS standard)
%check and returns the syndrome

%Does not perform error correction
  
%IEC 62106-E

% Generator matrix (Fig B.1)
%    1 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 1 1 0 1 1 1
%    0 1                           0 1 0 1 1 1 0 0 1 1 1
%    0   1                         0 1 1 1 0 1 0 1 1 1 1
%    0     1                       0 1 1 0 0 0 0 1 0 1 1
%    0       1                     0 1 1 0 1 0 1 1 0 0 1
%    0         1                   0 1 1 0 1 1 1 0 0 0 0
%    0           1                 0 0 1 1 0 1 1 1 0 0 0
%G = 0             1               0 0 0 1 1 0 1 1 1 0 0
%    0               1             0 0 0 0 1 1 0 1 1 1 0
%    0                 1           0 0 0 0 0 1 1 0 1 1 1
%    0                   1         0 1 0 1 1 0 0 0 1 1 1
%    0                     1       0 1 1 1 0 1 1 1 1 1 1
%    0                       1     0 1 1 0 0 0 0 0 0 1 1
%    0                         1   0 1 1 0 1 0 1 1 1 0 1
%    0                           1 0 1 1 0 1 1 1 0 0 1 0
%    0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 1 0 1 1 0 1 1 1 0 0 1

% Parity check matrix (fig B.3)
H= [1 0 0 0 0 0 0 0 0 0; ...
    0 1 0 0 0 0 0 0 0 0; ...
    0 0 1 0 0 0 0 0 0 0; ...
    0 0 0 1 0 0 0 0 0 0; ...
    0 0 0 0 1 0 0 0 0 0; ...
    0 0 0 0 0 1 0 0 0 0; ...
    0 0 0 0 0 0 1 0 0 0; ...
    0 0 0 0 0 0 0 1 0 0; ...
    0 0 0 0 0 0 0 0 1 0; ...
    0 0 0 0 0 0 0 0 0 1; ...
    1 0 1 1 0 1 1 1 0 0; ...
    0 1 0 1 1 0 1 1 1 0; ...
    0 0 1 0 1 1 0 1 1 1; ...
    1 0 1 0 0 0 0 1 1 1; ...
    1 1 1 0 0 1 1 1 1 1; ...
    1 1 0 0 0 1 0 0 1 1; ...
    1 1 0 1 0 1 0 1 0 1; ...
    1 1 0 1 1 1 0 1 1 0; ...
    0 1 1 0 1 1 1 0 1 1; ...
    1 0 0 0 0 0 0 0 0 1; ...
    1 1 1 1 0 1 1 1 0 0; ...
    0 1 1 1 1 0 1 1 1 0; ...
    0 0 1 1 1 1 0 1 1 1; ...
    1 0 1 0 1 0 0 1 1 1; ...
    1 1 1 0 0 0 1 1 1 1; ...
    1 1 0 0 0 1 1 0 1 1];
     

syndrome = mod(words*H,2);

%Try error correction
correctedWords = words;
if nargout>1
  bad_words_idx = find(any(syndrome~=0,2));
  if ~isempty(bad_words_idx)
    bad_words = words(bad_words_idx,:);
    for j = [1:26]
      new_words = bad_words + [zeros(1,j-1) 1 zeros(1,26-j)];
      new_syndrome = mod(new_words*H,2);
      ok_check = all(new_syndrome==0,2);
      if any(ok_check)
        disp('1 bit error alternative found')
      end
      bad_words(ok_check,:) = new_words(ok_check,:); %Replacing any words that are fixed with 1 bit change
    end
    correctedWords(bad_words_idx,:) = mod(bad_words,2);
    syndrome = mod(correctedWords*H,2);
  end
end
